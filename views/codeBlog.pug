#code_blog.site-content
  .container
    .blog-header
      h1.blog-title Drone War 1 Blog
      p.lead.blog-description Code Examples of the things that were really good fun
    .row
      .col-12.blog-main
        .blog-post
          h2.blog-post-title 
          p.blog-post-meta
            | January 1, 2014 by 
            a(href='#') nabooleo
          p
            | This blog is going to allow me to talk about the devlopment parts of the game that were crucial, the parts that were the most fun.
          hr
          p
            | To start I am going to show how I did the multiplayer stuff. Turns out after alot of reading and a lot of figuring out it is not that difficult to set up a basic
            | multiplayer server. Ok so syncing an entire game across the server is a bit more difficult, the code shown is just a basic three.js demo that will run, multiple two 
            | player games acsross mobile, tablet and desktop browser windows.
          p
            | The folder to download has a working version. All you have to do is, from the top level of that folder run node.js commands, as it is a node.js server.
            pre.codeBlog
              | npm install
              | node index.js
          p 
            | This will install all packages and start the server. Packages I used were PUG, Express and Socket.io
            | After reading loads about mutiplayer servers the basis for my code came from
          p
            a(href='http://buildnewgames.com/real-time-multiplayer/') http://buildnewgames.com/real-time-multiplayer/
          p 
            | Please read this as this acticle was where I started.
          P
            | I am going to take it for granted that you know three.js and need a multiplayer system for your amazing game. If you do not know three.js go &nbsp
            a(href='https://threejs.org/docs/index.html#manual/introduction/Creating-a-scene') here
            |  &nbsp I have used three.js, along with my multiplayer code, to have two spheres that can be controlled seperatly by two differnet browsers
            | using the arrow keys and 'w' for up and 's' for down.
            | If you then navigate to http://localhost:9001 on your Chrome/Safari browser.
          h2 How it works
          p
            | As each browser loads the first is assigned as player 1 (Yellow) and the second as player 2 (Green). This was done using websockets running on the browser and
            |  on the server with the 
            a(href='https://socket.io/') javacript socket.io framework &nbsp
            | the connection is made from the client 'app/gamecore.js' and the server 'index.js'
            | It is not necessary for this demo but I included it anyway, the server nominates player 1 as a host client. This client handles any game data that is required by both players.
            | For example the planet explosion is fired on player 1 then all data is passed to player 2 who then fires it's planet explosion based on this data. Really simple idea that I hope you understand because syncing data
            | gets really complicated really quickly, fun though. 
          h4 index.js
          p
            | This handles the connection request made by the client to the server, asking to start a new game, as shown in following code section. It creates the initial game data and then passes it back to the client, with the emit, and to game_server.js where the new game
            | is then started and stored in memory. <br />
            | It also creates an setGameData event that handles game data emitted by both clients and also passes it to game_server.js
          pre.codeBlog io.<span style="color:#fbde2d">on</span>('connection', (client) <span style="color:#fbde2d">=</span><span style="color:#fbde2d">></span> {
            = "\n"
            <span style="color:#fbde2d">  if</span> ( <span style="color:#8da6ce">app</span>.locals.host ) { <br/>    gameData <span style="color:#fbde2d">=</span> { <span style="color:#d8fa3c">game_id</span>: uuidv1(), <span style="color:#d8fa3c">player1</span>: client.<span style="color:#fbde2d">id</span>,<span style="color:#d8fa3c">player2</span>: 'player2' };
            <span style="color:#666">    // send the game id to the client </span></br>
            |     client.emit( 'gamestart', gameData ); 
            |     gameserver.join_game( gameData, client ); 
            |     numberOfGame <span style="color:#fbde2d">+</span><span style="color:#fbde2d">=</span> <span style="color:#d8fa3c">1</span>;
            |   }
            = "\n"
            <span style="color:#fbde2d">  if</span> ( !<span style="color:#8da6ce">app</span>.locals.host ) { </br>
            |     gameData.player2 <span style="color:#fbde2d">=</span> client.<span style="color:#fbde2d">id</span>;
            |     client.emit('gamestart', gameData );     
            |     gameserver.join_game( gameData, client ); 
            |   }
            = "\n" 
            <span style="color:#8da6ce">  app</span>.locals.host ? <span style="color:#8da6ce">app</span>.locals.host <span style="color:#fbde2d">=</span> <span style="color:#d8fa3c">0</span> : <span style="color:#8da6ce">app</span>.locals.host <span style="color:#fbde2d">=</span><span style="color:#d8fa3c"> 1</span>; </br></br>

            |   client.on(<span style="color:#61ce3c">'setGamedata'</span>, <span style="color:#fbde2d">function</span> ( data ) {
            ="\n" 
            <span style="color:#fbde2d">    try</span>
            |  {
            |      gameserver.setGamedata( data );
            |     }
            ="\n"
            <span style="color:#fbde2d">    catch</span> (err) { console.log( err ) } </br>
            |   })
            | })
          h4 game_server.js
          p
            | Is where each game is created and a record stored in this.games object using the join_game function. This function creates a new instance of the gamecore.server.js which is
            | the core game server code. The is also a setGameData() function that reads in the buffer data sent from the client and converts it back into a new Float32Array.
          h4 gamecore.server.js
          p
            | The module that handles input and output streams on the server, storing current positions for both players, running the server in an authoritive manner.
          h4 gamecore.js
          p
            | The module that handles input and output streams on the client, then updating the two player positions. This is done using the server in an authoritive manner, utimatly it 
            | decides the player positions. Running the client slightly behind the server and updating with data stream closet in time to the client time.
            | Code below shows the client being set to run behind the server and recording the server fps which ideally should run the same as the client fps.
            | It also show the latest data stream being added to the array of server updates that will ultimately be used to update player 2's position.
          pre.codeBlog client_onserverupdate_received<span style="color:#fbde2d">:</span> function ( <span style="color:#fbde2d">data</span> ) { <br/>
            |    server_time <span style="color:#fbde2d">=</span> <span style="color:#fbde2d">data</span><span style="color:#fbde2d">.</span>t;
            |    serverfps <span style="color:#fbde2d">=</span> <span style="color:#d8fa3c">Math</span><span style="color:#fbde2d">.</span>
            <span style="color:#8da6ce">floor</span>(<span style="color:#d8fa3c">1</span> <span style="color:#fbde2d">/</span> <span style="color:#fbde2d">data</span><span style="color:#fbde2d">.</span>fps); 
            <span style="color:#666">  // offset the client time according to the server time </span> <br/>
            |   client_time <span style="color:#fbde2d">=</span> server_time <span style="color:#fbde2d">-</span> net_offset;
            ="\n"
            <span style="color:#666">  // keep the inputs at array length 60</span> <br />
            |   server_updates<span style="color:#fbde2d">.</span>push( <span style="color:#fbde2d">data</span> );
            ="\n"
            <span style="color:#fbde2d">  if</span> ( server_updates<span style="color:#fbde2d">.</span><span style="color:#8da6ce">length</span> <span style="color:#fbde2d">>=</span> ( <span style="color:#d8fa3c">60</span> )) { <br/>
            |     server_updates<span style="color:#fbde2d">.</span>splice(<span style="color:#d8fa3c">0</span>, <span style="color:#d8fa3c">1</span>);
            |   }
            | },
          h4 mp.js
          p
            | Creates and renders the THREE.js meshs based on the position allocated by the server.


         
        // /.blog-post
        // /.blog-post
      // /.blog-main
    // /.row
  // /.container
